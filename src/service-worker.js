/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";


const staticCacheName = "site-static"
const assets =[
  '/',
  '/component/addNewExercise/addnewexercise.component.jsx',
  '/component/addNewExercise/addnewexercise.styles.css',
  '/component/commentPopUp/CommentPopUp.component.jsx',
  '/component/commentPopUp/CommentPopUp.styles.css',
  '/src/component/history/history.component.jsx',
  '/src/component/history/history.styles.css',
  '/src/component/homePage/HomePage.component.jsx',
  '/src/component/homePage/HomePage.styles.css',
  '/src/component/navbar/Navbar.component.jsx  ',
  '/src/component/navbar/Navbar.styles.css  ',
  '/src/component/previewRecords/PreviewRecords.component.jsx',
  '/src/component/previewRecords/PreviewRecords.styles.css',
  '/src/component/recordExercise/RecordExercise.component.jsx',
  '/src/component/recordExercise/RecordExercise.styles.css',
  '/src/component/savedProgress/SavedProgress.component.jsx',
  '/src/component/savedProgress/SavedProgress.styles.css',
  '/src/component/search/search.component.jsx',
  '/src/component/search/search.styles.css',
  '/src/component/showComment/ShowComment.compenent.jsx',
  '/src/component/showComment/ShowComment.styles.css',
  '/src/component/showCrudBtn/ShowCrudBtn.component.jsx',
  '/src/component/showCrudBtn/ShowCrudBtn.styles.css',
  '/src/component/ShowCurrentProgress/ShowCurrentProgress.component.jsx',
  '/src/component/ShowCurrentProgress/ShowCurrentProgress.styles.css',
  '/src/component/userInputContainer/UserInputContainer.component.jsx',
  '/src/component/userInputContainer/UserInputContainer.styles.css',
  '/src/utils/commonFuncs.utils.js',
  '/src/utils/firebase.utils.js',
]

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith("/_")) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);



// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
self.addEventListener("install", (evt) => {
  evt.waitUntil(
    caches.open(staticCacheName).then((cache) => {
      console.log("caching shell assets");
      cache.addAll(assets);
    })
  );
});